{"version":3,"sources":["components/Card.js","components/CardList.js","components/Loading.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","contants.js","containers/App.js","actions.js","api.js","reportWebVitals.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","Loading","Scroll","children","style","overflowY","height","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","props","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","dispatch","useDispatch","useSelector","searchField","searchRobots","requestRobots","isPending","useEffect","a","fetch","then","res","json","data","payload","filteredRobots","filter","toLocaleLowerCase","includes","e","text","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initialStateSearch","initialStateRobot","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.60309778.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => (\n  <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow shadow-5\">\n    <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => (\n  <>\n    {robots.map((robot) => (\n      <Card\n        key={robot.id}\n        id={robot.id}\n        name={robot.name}\n        email={robot.email}\n      />\n    ))}\n  </>\n);\n\nexport default CardList;\n","const Loading = () => (\n  <div className=\"vh-100 dt w-100\">\n    <h1 className=\"tc f1 dtc v-mid\">Loading...</h1>\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\n\nconst Scroll = ({ children }) => (\n  <div style={{ overflowY: 'scroll', height: '80vh'}}>\n    {children}\n  </div>\n)\n\nexport default Scroll;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => (\n  <div className=\"pa2\">\n    <input\n      aria-label=\"Search Robos\"\n      type=\"search\"\n      className=\"pa3 ba b--green\"\n      placeholder=\"Search robo friends\"\n      onChange={searchChange}\n    />\n  </div>\n);\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.hasError ? (\n          <h1>Oops!!! Something went wrong please reload the page</h1>\n        ) : (\n          this.props.children\n        )}\n      </>\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CardList,\n  ErrorBoundary,\n  Loading,\n  SearchBox,\n  Scroll,\n} from '../components';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nimport './App.css';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const { searchField, robots, isPending, hasError } = useSelector((state) => ({\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    hasError: state.requestRobots.error,\n  }));\n\n  useEffect(() => {\n    dispatch(requestRobots());\n  }, [dispatch]);\n\n  const onSearchChange = (e) => dispatch(setSearchField(e.target.value));\n\n  const filteredRobots = robots.filter((robot) =>\n    robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n  );\n\n  return isPending || hasError ? (\n    <Loading />\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">Robo friends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default App;\n","import { apiGetReq } from './api';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './contants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => async (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  try {\n    const data = await apiGetReq('https://jsonplaceholder.typicode.com/users');\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\n  }\n};\n","export const apiGetReq = (url) => fetch(url).then((res) => res.json());\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './contants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nconst initialStateRobot = {\n  isPending: false,\n  robots: [],\n  error: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialStateRobot, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        isPending: false,\n        robots: action.payload,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { searchRobots, requestRobots } from './reducers';\n\nimport 'tachyons';\nimport './index.css';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}